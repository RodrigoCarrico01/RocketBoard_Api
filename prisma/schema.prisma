// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  member
  admin
}

enum TaskStatus {
  pending
  in_progress
  completed
  canceled
}

enum TaskPriority {
  low
  medium
  high
}

model User {
  id        String        @id @default(uuid())
  name      String
  email     String
  password  String

  role       UserRole     @default(member)

  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime?     @updatedAt @map("updated_at")

  teamMemberships TeamMember[]
  assignedTasks   Task[]       @relation("UserTasks")
  taskChanges     TaskHistory[] @relation("ChangedBy")
 
  @@map("users")
}

model Team {
  id          String        @id @default(uuid())
  name        String
  description String 

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?      @updatedAt @map("updated_at")

  members TeamMember[]
  tasks   Task[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid())

  userId    String   @map("user_id")
  teamId    String   @map("team_id")

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@map("team_members")
}

model Task {
  id          String       @id @default(uuid())
  title       String
  description String
  status      TaskStatus
  priority    TaskPriority

  assignedTo  String       @map("assigned_to")
  teamId      String       @map("team_id")

  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")

  assignee User @relation("UserTasks", fields: [assignedTo], references: [id])
  team     Team @relation(fields: [teamId], references: [id])

  history  TaskHistory[]

  @@map("tasks")
}

model TaskHistory {
  id         String     @id @default(uuid())

  taskId     String     @map("task_id")
  changedBy  String     @map("changed_by")

  oldStatus  TaskStatus @map("old_status")
  newStatus  TaskStatus @map("new_status")

  changedAt  DateTime   @default(now()) @map("changed_at")

  task     Task @relation(fields: [taskId], references: [id])

  changedByUser User @relation("ChangedBy", fields: [changedBy], references: [id])

  @@map("task_history")
}